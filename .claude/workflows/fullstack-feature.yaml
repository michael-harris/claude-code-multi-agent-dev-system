name: fullstack-feature
description: Complete fullstack feature implementation with T1/T2 switching
trigger: internal
called_by: task-orchestrator

parameters:
  - name: task
    type: object
    required: true
  - name: iteration
    type: integer
    default: 1
  - name: tier
    type: string
    default: "t1"
  - name: previous_gaps
    type: array
    default: []

steps:
  - name: load_prd
    action: read_file
    file: "docs/planning/PROJECT_PRD.yaml"
    extract: technical.backend.language

  - name: database_layer
    sequence:
      - name: design_schema
        agent: database-designer
        action: design
        input: "{task.technical_requirements.database}"
        output: "docs/database/schema-{task.id}.yaml"
        skip_if: iteration > 1 AND "database" not in previous_gaps

      - name: implement_schema
        agent: database-developer-{backend_language}-{tier}
        action: implement
        input: "docs/database/schema-{task.id}.yaml"
        output:
          models: "src/models/"
          migrations: "migrations/"
        tier_selection:
          iteration_1: t1
          iteration_2: t1
          iteration_3_plus: t2
        skip_if: iteration > 1 AND "database" not in previous_gaps

  - name: api_layer
    sequence:
      - name: design_api
        agent: api-designer
        action: design
        input:
          task: "{task}"
          database_schema: "docs/database/schema-{task.id}.yaml"
        output: "docs/api/{task.id}-api-spec.yaml"
        skip_if: iteration > 1 AND "api" not in previous_gaps

      - name: implement_api
        agent: api-developer-{backend_language}-{tier}
        action: implement
        input:
          spec: "docs/api/{task.id}-api-spec.yaml"
          task: "{task}"
        output: "src/api/"
        tier_selection:
          iteration_1: t1
          iteration_2: t1
          iteration_3_plus: t2
        skip_if: iteration > 1 AND "api" not in previous_gaps

      - name: review_backend
        agent: backend-code-reviewer-{backend_language}
        action: review
        input:
          code: "src/"
          task: "{task}"
        output: "docs/reviews/{task.id}-backend-review.md"

  - name: frontend_layer
    sequence:
      - name: design_components
        agent: frontend-designer
        action: design
        input:
          task: "{task}"
          api_contract: "docs/api/{task.id}-api-spec.yaml"
        output: "docs/frontend/{task.id}-design.md"
        skip_if: iteration > 1 AND "frontend" not in previous_gaps

      - name: implement_frontend
        agent: frontend-developer-{tier}
        action: implement
        input:
          design: "docs/frontend/{task.id}-design.md"
          api_contract: "docs/api/{task.id}-api-spec.yaml"
        output: "src/frontend/components/"
        tier_selection:
          iteration_1: t1
          iteration_2: t1
          iteration_3_plus: t2
        skip_if: iteration > 1 AND "frontend" not in previous_gaps

      - name: review_frontend
        agent: frontend-code-reviewer
        action: review
        input:
          code: "src/frontend/"
          task: "{task}"
        output: "docs/reviews/{task.id}-frontend-review.md"

  - name: quality_layer
    parallel: true
    steps:
      - name: write_tests
        agent: test-writer
        action: generate_tests
        input:
          backend_code: "src/api/"
          frontend_code: "src/frontend/"
          task: "{task}"
        output: "tests/"

      - name: security_audit
        agent: security-auditor
        action: audit
        input:
          backend: "src/"
          frontend: "src/frontend/"
          task: "{task}"
        output: "docs/security/{task.id}-audit.md"

  - name: documentation
    agent: documentation-coordinator
    action: generate_docs
    input:
      task: "{task}"
      database: "docs/database/schema-{task.id}.yaml"
      api: "docs/api/{task.id}-api-spec.yaml"
      frontend: "docs/frontend/{task.id}-design.md"
    output:
      api_docs: "docs/api/{task.id}.md"
      user_guide: "docs/features/{task.id}.md"

output:
  artifacts:
    database_implementation: "src/models/"
    api_implementation: "src/api/"
    frontend_implementation: "src/frontend/"
    tests: "tests/"
    security_audit: "docs/security/{task.id}-audit.md"
    documentation: "docs/"
  
  metrics:
    tier_used: "{tier}"
    iteration: "{iteration}"
